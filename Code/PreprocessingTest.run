for{(i,j) in CP}{

	if cos(theta0[i])>=0 and cos(theta0[j])>=0 and sin(theta0[i])>=0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])>=0 and sin(theta0[i])>=0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])>=0 and sin(theta0[i])< 0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])>=0 and sin(theta0[i])< 0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);		
	}	
	if cos(theta0[i])>=0 and cos(theta0[j])< 0 and sin(theta0[i])>=0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])< 0 and sin(theta0[i])>=0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])< 0 and sin(theta0[i])< 0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])>=0 and cos(theta0[j])< 0 and sin(theta0[i])< 0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);		
	}	
	if cos(theta0[i])< 0 and cos(theta0[j])>=0 and sin(theta0[i])>=0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])< 0 and cos(theta0[j])>=0 and sin(theta0[i])>=0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])< 0 and cos(theta0[j])>=0 and sin(theta0[i])< 0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])< 0 and cos(theta0[j])>=0 and sin(theta0[i])< 0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
	}	
	if cos(theta0[i])< 0 and cos(theta0[j])< 0 and sin(theta0[i])>=0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);	
	}
	if cos(theta0[i])< 0 and cos(theta0[j])< 0 and sin(theta0[i])>=0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);	
	}
	if cos(theta0[i])< 0 and cos(theta0[j])< 0 and sin(theta0[i])< 0 and sin(theta0[j])>=0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
	}
	if cos(theta0[i])< 0 and cos(theta0[j])< 0 and sin(theta0[i])< 0 and sin(theta0[j])< 0 then{
		let uvrx[i,j] := qmin*lcc*v0[i]*cos(theta0[i]) - qmax*uss*v0[i]*sin(theta0[i]) - qmax*ucc*v0[j]*cos(theta0[j]) + qmin*lss*v0[j]*sin(theta0[j]);
		let lvrx[i,j] := qmax*ucc*v0[i]*cos(theta0[i]) - qmin*lss*v0[i]*sin(theta0[i]) - qmin*lcc*v0[j]*cos(theta0[j]) + qmax*uss*v0[j]*sin(theta0[j]);
		let uvry[i,j] := qmin*lss*v0[i]*cos(theta0[i]) + qmin*lcc*v0[i]*sin(theta0[i]) - qmax*uss*v0[j]*cos(theta0[j]) - qmax*ucc*v0[j]*sin(theta0[j]);
		let lvry[i,j] := qmax*uss*v0[i]*cos(theta0[i]) + qmax*ucc*v0[i]*sin(theta0[i]) - qmin*lss*v0[j]*cos(theta0[j]) - qmin*lcc*v0[j]*sin(theta0[j]);		
	}

	let a[i,j] := yr0[i,j]**2 - d**2;
	let b[i,j] := xr0[i,j]**2 - d**2;
	let c[i,j] := 2*xr0[i,j]*yr0[i,j];
	
	if xr0[i,j]>=0 and yr0[i,j]>=0 then {
		let Mbin11[i,j] := xr0[i,j]*uvry[i,j] - yr0[i,j]*lvrx[i,j];
		let Mbin12[i,j] := -xr0[i,j]*lvry[i,j] + yr0[i,j]*uvrx[i,j];
		if b[i,j]>=0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin331[i,j] := 2*b[i,j]*uvry[i,j] - uvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if b[i,j]>=0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin331[i,j] := 2*b[i,j]*uvry[i,j] - lvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));	
		if b[i,j]< 0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin331[i,j] := 2*b[i,j]*lvry[i,j] - uvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if b[i,j]< 0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin331[i,j] := 2*b[i,j]*lvry[i,j] - lvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if a[i,j]>=0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin332[i,j] := 2*a[i,j]*uvrx[i,j] - uvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if a[i,j]>=0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin332[i,j] := 2*a[i,j]*uvrx[i,j] - lvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		if a[i,j]< 0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin332[i,j] := 2*a[i,j]*lvrx[i,j] - uvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if a[i,j]< 0 and -(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin332[i,j] := 2*a[i,j]*lvrx[i,j] - lvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		let gammal[i,j] := 2*b[i,j];
		let gammau[i,j] := 2*a[i,j];
		let phil[i,j] := c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
		let phiu[i,j] := c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
	}
	if xr0[i,j]>=0 and yr0[i,j]< 0 then {
		let Mbin11[i,j] := xr0[i,j]*uvry[i,j] - yr0[i,j]*uvrx[i,j];
		let Mbin12[i,j] := -xr0[i,j]*lvry[i,j] + yr0[i,j]*lvrx[i,j];		
		if a[i,j]>=0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin311[i,j] := 2*a[i,j]*uvrx[i,j] - uvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if a[i,j]>=0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin311[i,j] := 2*a[i,j]*uvrx[i,j] - lvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));				
		if a[i,j]< 0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin311[i,j] := 2*a[i,j]*lvrx[i,j] - uvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if a[i,j]< 0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin311[i,j] := 2*a[i,j]*lvrx[i,j] - lvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		if -b[i,j]>=0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin312[i,j] := -2*b[i,j]*uvry[i,j] + uvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -b[i,j]>=0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin312[i,j] := -2*b[i,j]*uvry[i,j] + lvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));	
		if -b[i,j]< 0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin312[i,j] := -2*b[i,j]*lvry[i,j] + uvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -b[i,j]< 0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin312[i,j] := -2*b[i,j]*lvry[i,j] + lvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		let gammal[i,j] := 2*a[i,j];
		let gammau[i,j] := -2*b[i,j];
		let phil[i,j] := c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
		let phiu[i,j] := c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
	}
	if xr0[i,j]< 0 and yr0[i,j]>=0 then {
		let Mbin11[i,j] := xr0[i,j]*lvry[i,j] - yr0[i,j]*lvrx[i,j];
		let Mbin12[i,j] := -xr0[i,j]*uvry[i,j] + yr0[i,j]*uvrx[i,j];
		if -a[i,j]>=0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin321[i,j] := -2*a[i,j]*uvrx[i,j] + uvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -a[i,j]>=0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin321[i,j] := -2*a[i,j]*uvrx[i,j] + lvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		if -a[i,j]< 0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin321[i,j] := -2*a[i,j]*lvrx[i,j] + uvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -a[i,j]< 0 and (c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin321[i,j] := -2*a[i,j]*lvrx[i,j] + lvry[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if b[i,j]>=0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin322[i,j] := 2*b[i,j]*uvry[i,j] - uvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if b[i,j]>=0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin322[i,j] := 2*b[i,j]*uvry[i,j] - lvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));			
		if b[i,j]< 0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin322[i,j] := 2*b[i,j]*lvry[i,j] - uvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if b[i,j]< 0 and -(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin322[i,j] := 2*b[i,j]*lvry[i,j] - lvrx[i,j]*(c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));				
		let gammal[i,j] := -2*a[i,j];
		let gammau[i,j] := 2*b[i,j];
		let phil[i,j] := c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
		let phiu[i,j] := c[i,j] - sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
	}
	if xr0[i,j]< 0 and yr0[i,j]< 0 then {
		let Mbin11[i,j] := xr0[i,j]*lvry[i,j] - yr0[i,j]*uvrx[i,j];
		let Mbin12[i,j] := -xr0[i,j]*uvry[i,j] + yr0[i,j]*lvrx[i,j];
		if -b[i,j]>=0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin341[i,j] := -2*b[i,j]*uvry[i,j] + uvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -b[i,j]>=0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin341[i,j] := -2*b[i,j]*uvry[i,j] + lvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));		
		if -b[i,j]< 0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin341[i,j] := -2*b[i,j]*lvry[i,j] + uvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -b[i,j]< 0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin341[i,j] := -2*b[i,j]*lvry[i,j] + lvrx[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));			
		if -a[i,j]>=0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin342[i,j] := -2*a[i,j]*uvrx[i,j] + uvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -a[i,j]>=0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin342[i,j] := -2*a[i,j]*uvrx[i,j] + lvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -a[i,j]< 0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))>=0 then let Mbin342[i,j] := -2*a[i,j]*lvrx[i,j] + uvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));
		if -a[i,j]< 0 and (c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]))< 0 then let Mbin342[i,j] := -2*a[i,j]*lvrx[i,j] + lvry[i,j]*(c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]));	
		let gammal[i,j] := -2*b[i,j];
		let gammau[i,j] := -2*a[i,j];
		let phil[i,j] := c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
		let phiu[i,j] := c[i,j] + sqrt(c[i,j]**2 - 4*a[i,j]*b[i,j]);
	}


}

#display Mbin11, Mbin12, Mbin311, Mbin312, Mbin321, Mbin322, Mbin331, Mbin332, Mbin341, Mbin342;

#let C1 := {};
#let C2 := {};
#let C3 := {};
#let {i in A} ic[i] := 0;
#for {(i,j) in CP}{
#
#
#if xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j] <= 0 and
#(vrx[i,j]**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j] - c[i,j] <= 0 then 
#
#
#{
##if ic[i] and ic[j] = 0 => add to any cluster
##if ic[i] = 1 and ic[j] = 0 => add j to cluster i
##if ic[i] = 0 and ic[j] = 1 => add i to cluster j
##if ic[i] = 1 and ic[j] = 1 => flag
#if card(C1) < nc then {let C1 := C1 union {i,j};
#continue;}
#if card(C1) >= nc and card(C2) < nc then {let C2 := C2 union {i,j} diff C1;
#continue;}
#if card(C1) >= nc and card(C2) >= nc then {let C3 := C3 union {i,j} diff C1 diff C2;
#continue;}}
#}
#display C1,C2,C3;
#display xr0[1,2], yr0[1,2], gammal[1,2],vrx[1,2], phil[1,2],vry[1,2], z[1,2], Mbin311[1,2], Mbin312[1,2], gammau[1,2], phiu[1,2];