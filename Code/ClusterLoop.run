reset;

#model C:\Users\jwsjt\Desktop\acrp-lib-master\Code\NC_ACRP_Cluster.mod;
model C:\Users\user\Documents\THESIS\THESIS2021\Code\NC_ACRP_Cluster.mod

problem NC_ACRP: Obj,q,theta,vrx,vry,z,bin11,bin12,cvrx,cvry,bin311,bin312,bin321,bin322,bin331,bin332,bin341,bin342;
#option solver "C:\Users\jwsjt\Desktop\acrp-lib-master\CoinAll-1.6.2-win32-cl15ifort11.1\bin\couenne.exe";
option solver couenne;

data C:\Users\user\Documents\THESIS\THESIS2021\Data\RCP_Instances\RCP_Instances\RCP_20_20.dat;		
	
let A := 1..n;
let C := A;
let wd := 0.5;
let nc := 5;

# pre-processing of variables bounds and coefficients
#include C:\Users\jwsjt\Desktop\acrp-lib-master\Code\PreprocessingCluster.run;
include C:\Users\user\Documents\THESIS\THESIS2021\Code\PreprocessingTest.run;



for {(i,j) in CP}{
    let a[i,j] := yr0[i,j]**2 - d**2;
    let b[i,j] := xr0[i,j]**2 - d**2;
    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
}

for {(i,j) in CP}{
    let test1[i,j] := -1 * (xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j]);
    let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
}

include C:\Users\user\Documents\THESIS\THESIS2021\Code\Clustering.run;

#Create Set of Clusters, iterate over set - if card(C1) >0 => solve else continue


repeat{

            display CD, ic, iw >> C:\Users\user\Documents\THESIS\Outputs\ClusterLoop\sets.txt;


            for {y in {1..nc}}{
            let C := A;
            if card(CD[y]) = 0 then continue;
            else {
            let C := CD[y];
            
            problem NC_ACRP;
            solve NC_ACRP;

            for {(i,j) in CP}{
            let test1[i,j] := xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j];
            let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
            }

            display q,theta,Obj;
            }
            }
            let C := A;

            include C:\Users\user\Documents\THESIS\THESIS2021\Code\Clustering.run;

            for {y in {1..nc}}{
            let C := A;
            if card(CD[y]) = 0 then let clustercon := clustercon + 1;
            }
            let numloop := numloop + 1;

            if numloop = 8 or clustercon = 5 then break;
            
};








#display test1, test2;
