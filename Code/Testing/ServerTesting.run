reset;

model /home/johnT/Testing/Code/NC_ACRP_Cluster.mod

problem NC_ACRP: Obj,q,theta,vrx,vry,z,bin11,bin12,cvrx,cvry,bin311,bin312,bin321,bin322,bin331,bin332,bin341,bin342;

option solver couenne;

#Limited Cluster
for{nb in {40}}{
    for {l in {3}}{
        for {k in 1..100}{

    		reset data;
    		data("/home/johnT/Testing/Data/RCP_"& nb & "_" & k & ".dat")

            let A := 1..n;
            let C := A;
            let wd := 0.5;
            let nc := 15;
            let numc := l;
            
    		    # pre-processing of variables bounds and coefficients
                include /home/johnT/Testing/Code/PreprocessingTest.run;

                for {(i,j) in CP}{
                    let a[i,j] := yr0[i,j]**2 - d**2;
                    let b[i,j] := xr0[i,j]**2 - d**2;
                    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
                }

                for {(i,j) in CP}{
                    let test1[i,j] := -1 * (xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j]);
                    let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
                }

                let totaltime := 0;

                include /home/johnT/Testing/Code/ClusterLoop_Limited.run;



    }
}
}
#Limited Post Cluster
for{nb in {20}}{
    for {l in {8}}
    for {k in 11..100}{
    		reset data;
    		data("/home/johnT/Testing/Data/RCP_"& nb & "_" & k & ".dat")

            let A := 1..n;
            let C := A;
            let wd := 0.5;
            let nc := 10;
            let numc := l;

    		    # pre-processing of variables bounds and coefficients
                include /home/johnT/Testing/Code/PreprocessingTest.run;

                for {(i,j) in CP}{
                    let a[i,j] := yr0[i,j]**2 - d**2;
                    let b[i,j] := xr0[i,j]**2 - d**2;
                    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
                }

                for {(i,j) in CP}{
                    let test1[i,j] := -1 * (xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j]);
                    let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
                }

                let totaltime := 0;

                include /home/johnT/Testing/Code/ClusterLoop_PostCluster_Limited.run;



    }
}
#Cluster
for{nb in {10,20}}{
    for {k in 1..100}{
    		reset data;
    		data("/home/johnT/Testing/Data/RCP_"& nb & "_" & k & ".dat")

            let A := 1..n;
            let C := A;
            let wd := 0.5;
            let nc := 10;
            let numc := 10;

    		    # pre-processing of variables bounds and coefficients
                include /home/johnT/Testing/Code/PreprocessingTest.run;

                for {(i,j) in CP}{
                    let a[i,j] := yr0[i,j]**2 - d**2;
                    let b[i,j] := xr0[i,j]**2 - d**2;
                    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
                }

                for {(i,j) in CP}{
                    let test1[i,j] := -1 * (xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j]);
                    let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
                }

                let totaltime := 0;

                include /home/johnT/Testing/Code/ClusterLoop.run;


    }
}
#Post Cluster
for{nb in {10, 20}}{
    for {k in 1..100}{
    		reset data;
    		data("/home/johnT/Testing/Data/RCP_"& nb & "_" & k & ".dat")

            let A := 1..n;
            let C := A;
            let wd := 0.5;
            let nc := nb/2;
            let numc := 10;

    		    # pre-processing of variables bounds and coefficients
                include /home/johnT/Testing/Code/PreprocessingTest.run;

                for {(i,j) in CP}{
                    let a[i,j] := yr0[i,j]**2 - d**2;
                    let b[i,j] := xr0[i,j]**2 - d**2;
                    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
                }

                for {(i,j) in CP}{
                    let test1[i,j] := -1 * (xr0[i,j] * vrx[i,j] + yr0[i,j] * vry[i,j]);
                    let test2[i,j] := ((vrx[i,j])**2) * a[i,j] + (vry[i,j]**2) * b[i,j] - vrx[i,j]*vry[i,j]*c[i,j];
                }

                let totaltime := 0;

                include /home/johnT/Testing/Code/ClusterLoop_PostCluster.run;



    }
}

#Benchmark
for{nb in {10}}{
    for {k in 1..100}{
    		reset data;
    		data("/home/johnT/Testing/Data/RCP_"& nb & "_" & k & ".dat")

            let A := 1..n;
            let C := A;
            let wd := 0.5;

    		    # pre-processing of variables bounds and coefficients
                include /home/johnT/Testing/Code/PreprocessingTest.run;

                for {(i,j) in CP}{
                    let a[i,j] := yr0[i,j]**2 - d**2;
                    let b[i,j] := xr0[i,j]**2 - d**2;
                    let c[i,j] := 2*xr0[i,j]*yr0[i,j];
                }

                include /home/johnT/Testing/Code/RCP_Benchmark.run;



    }
}